{"version":3,"sources":["ui.js","constants.js","gameState.js","buttons.js","init.js"],"names":["modFox","state","document","querySelector","className","modScene","togglePoopBag","show","classList","toggle","writeModal","text","innerHTML","ICONS","SCENES","TICK_RATE","RAIN_CHANCE","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","gameState","current","wakeTime","sleepTime","hungryTime","dieTime","poopTime","timeToStartCelebrating","timeToEndCelebrating","scene","tick","wake","sleep","getHungry","startCelebrating","endCelebrating","poop","die","startGame","determineFoxState","handleUserAction","icon","includes","changeWeather","cleanUpPoop","feed","length","clearTimes","bind","toggleHighlighted","initButtons","selectedIcon","addEventListener","buttonCLick","target","contains","init","console","log","nextTimeToTick","Date","now","requestAnimationFrame","nextAnimationFrame"],"mappings":"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","file":"init.7912660e.js","sourceRoot":"..","sourcesContent":["export const modFox = function modFox(state) {\r\n    document.querySelector(\".fox\").className = `fox fox-${state}`;\r\n};\r\nexport const modScene = function modScene(state) {\r\n    document.querySelector(\".game\").className = `game ${state}`;\r\n};\r\nexport const togglePoopBag = function togglePoopBag(show) {\r\n    document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !show);\r\n};\r\nexport const writeModal = function writeModal(text = \"\") {\r\n    document.querySelector(\r\n        \".modal\"\r\n    ).innerHTML = `<div class=\"modal-inner\">${text}</div>`;\r\n};\r\n","export const ICONS = [\"fish\", \"poop\", \"weather\"];\r\nexport const SCENES = [\"day\", \"rain\"];\r\nexport const TICK_RATE = 3000;\r\nexport const RAIN_CHANCE = 0.2;\r\nexport const DAY_LENGTH = 60;\r\nexport const NIGHT_LENGTH = 5;\r\nexport const getNextHungerTime = (clock) =>\r\n    Math.floor(Math.random() * 3) + 8 + clock;\r\nexport const getNextDieTime = (clock) =>\r\n    Math.floor(Math.random() * 3) + 3 + clock;\r\nexport const getNextPoopTime = (clock) =>\r\n    Math.floor(Math.random() * 3) + 8 + clock;\r\n","import {modFox, modScene, togglePoopBag, writeModal} from './ui'\r\nimport {\r\n    DAY_LENGTH,\r\n    getNextDieTime,\r\n    getNextHungerTime,\r\n    getNextPoopTime,\r\n    NIGHT_LENGTH,\r\n    RAIN_CHANCE,\r\n    SCENES\r\n} from './constants'\r\n\r\nconst gameState = {\r\n    current: \"INIT\",\r\n    clock: 1,\r\n    wakeTime: -1,\r\n    sleepTime: -1,\r\n    hungryTime: -1,\r\n    dieTime: -1,\r\n    poopTime: -1,\r\n    timeToStartCelebrating: -1,\r\n    timeToEndCelebrating: -1,\r\n    scene: 0,\r\n    tick() {\r\n        this.clock++;\r\n        if (this.clock === this.wakeTime) {\r\n            this.wake();\r\n        } else if (this.clock === this.sleepTime) {\r\n            this.sleep();\r\n        } else if (this.clock === this.hungryTime) {\r\n            this.getHungry();\r\n        } else if (this.clock === this.timeToStartCelebrating) {\r\n            this.startCelebrating();\r\n        } else if (this.clock === this.timeToEndCelebrating) {\r\n            this.endCelebrating();\r\n        } else if (this.clock === this.poopTime) {\r\n            this.poop();\r\n        } else if (this.clock === this.dieTime) {\r\n            this.die();\r\n        }\r\n\r\n        return this.clock;\r\n    },\r\n    startGame() {\r\n        this.current = \"HATCHING\";\r\n        this.wakeTime = this.clock + 3;\r\n        modFox(\"egg\");\r\n        modScene(\"day\");\r\n        writeModal();\r\n    },\r\n    wake() {\r\n        this.current = \"IDLING\";\r\n        this.wakeTime = -1;\r\n        modFox(\"idling\");\r\n        this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\r\n        modScene(SCENES[this.scene]);\r\n        this.determineFoxState();\r\n        this.sleepTime = this.clock + DAY_LENGTH;\r\n        this.hungryTime = getNextHungerTime(this.clock);\r\n    },\r\n    handleUserAction(icon) {\r\n        // can't do actions while in these states\r\n        if (\r\n            [\"SLEEP\", \"FEEDING\", \"CELEBRATING\", \"HATCHING\"].includes(this.current)\r\n        ) {\r\n            // do nothing\r\n            return;\r\n        }\r\n\r\n        if (this.current === \"INIT\" || this.current === \"DEAD\") {\r\n            this.startGame();\r\n            return;\r\n        }\r\n\r\n        // execute the currently selected action\r\n        switch (icon) {\r\n            case \"weather\":\r\n                this.changeWeather();\r\n                break;\r\n            case \"poop\":\r\n                this.cleanUpPoop();\r\n                break;\r\n            case \"fish\":\r\n                this.feed();\r\n                break;\r\n        }\r\n    },\r\n    changeWeather() {\r\n        this.scene = (1 + this.scene) % SCENES.length;\r\n        modScene(SCENES[this.scene]);\r\n        this.determineFoxState();\r\n    },\r\n    cleanUpPoop() {\r\n        if (this.current === \"POOPING\") {\r\n            this.dieTime = -1;\r\n            togglePoopBag(true);\r\n            this.startCelebrating();\r\n            this.hungryTime = getNextHungerTime(this.clock);\r\n        }\r\n    },\r\n    poop() {\r\n        this.current = \"POOPING\";\r\n        this.poopTime = -1;\r\n        this.dieTime = getNextDieTime(this.clock);\r\n        modFox(\"pooping\");\r\n    },\r\n    feed() {\r\n        // can only feed when hungry\r\n        if (this.current !== \"HUNGRY\") {\r\n            return;\r\n        }\r\n\r\n        this.current = \"FEEDING\";\r\n        this.dieTime = -1;\r\n        this.poopTime = getNextPoopTime(this.clock);\r\n        modFox(\"eating\");\r\n        this.timeToStartCelebrating = this.clock + 2;\r\n    },\r\n    startCelebrating() {\r\n        this.current = \"CELEBRATING\";\r\n        modFox(\"celebrate\");\r\n        this.timeToStartCelebrating = -1;\r\n        this.timeToEndCelebrating = this.clock + 2;\r\n    },\r\n    endCelebrating() {\r\n        this.timeToEndCelebrating = -1;\r\n        this.current = \"IDLING\";\r\n        this.determineFoxState();\r\n        togglePoopBag(false);\r\n    },\r\n    determineFoxState() {\r\n        if (this.current === \"IDLING\") {\r\n            if (SCENES[this.scene] === \"rain\") {\r\n                modFox(\"rain\");\r\n            } else {\r\n                modFox(\"idling\");\r\n            }\r\n        }\r\n    },\r\n    clearTimes() {\r\n        this.wakeTime = -1;\r\n        this.sleepTime = -1;\r\n        this.hungryTime = -1;\r\n        this.dieTime = -1;\r\n        this.poopTime = -1;\r\n        this.timeToStartCelebrating = -1;\r\n        this.timeToEndCelebrating = -1;\r\n    },\r\n    sleep() {\r\n        this.current = \"SLEEP\";\r\n        modFox(\"sleep\");\r\n        modScene(\"night\");\r\n        this.clearTimes();\r\n        this.wakeTime = this.clock + NIGHT_LENGTH;\r\n    },\r\n    getHungry() {\r\n        this.current = \"HUNGRY\";\r\n        this.dieTime = getNextDieTime(this.clock);\r\n        this.hungryTime = -1;\r\n        modFox(\"hungry\");\r\n    },\r\n    die() {\r\n        this.current = \"DEAD\";\r\n        modScene(\"dead\");\r\n        modFox(\"dead\");\r\n        this.clearTimes();\r\n        writeModal(\"The fox died :( <br/> Press the middle button to start\");\r\n    },\r\n};\r\n\r\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\r\nexport default gameState;\r\n\r\n\r\n","import {ICONS} from './constants'\r\n\r\n\r\nconst toggleHighlighted = (icon, show) =>\r\n    document\r\n        .querySelector(`.${ICONS[icon]}-icon`)\r\n        .classList[show ? \"add\" : \"remove\"](\"highlighted\");\r\n\r\nexport default function initButtons(handleUserAction){\r\n    let selectedIcon = 0\r\n    function buttonCLick({target}){\r\n        if(target.classList.contains('left-btn')){\r\n            toggleHighlighted(selectedIcon,false)\r\n            selectedIcon = (2 + selectedIcon) % ICONS.length\r\n            toggleHighlighted(selectedIcon,true)\r\n        }else if(target.classList.contains('right-btn')){\r\n            toggleHighlighted(selectedIcon,false)\r\n            selectedIcon = (1 + selectedIcon) % ICONS.length\r\n            toggleHighlighted(selectedIcon,true)\r\n        }else {\r\n            handleUserAction(ICONS[selectedIcon])\r\n        }\r\n    }\r\n    document.querySelector('.buttons').addEventListener('click',buttonCLick)\r\n}\r\n","import game, {handleUserAction} from './gameState'\r\nimport {TICK_RATE} from './constants'\r\nimport initButtons from './buttons'\r\n\r\n\r\nfunction init() {\r\n    console.log('starting game')\r\n    initButtons(handleUserAction);\r\n    let nextTimeToTick = Date.now()\r\n\r\n    function nextAnimationFrame(){\r\n        const now = Date.now()\r\n        if(nextTimeToTick <= now) {\r\n            game.tick()\r\n            nextTimeToTick = now + TICK_RATE\r\n        }\r\n        //call itself\r\n        requestAnimationFrame(nextAnimationFrame)\r\n    }\r\n    // start animation frame\r\n    requestAnimationFrame(nextAnimationFrame)\r\n}\r\n\r\ninit()\r\n"]}